package ccm_pyactr

import (
	"fmt"
	"os/exec"
	"strings"
	"time"

	"github.com/urfave/cli/v2"

	"github.com/asmaloney/gactar/actr"
	"github.com/asmaloney/gactar/framework"
	"github.com/asmaloney/gactar/version"
)

var Info framework.Info = framework.Info{
	Name:           "ccm",
	Language:       "python",
	FileExtension:  "py",
	ExecutableName: "python3",

	PythonRequiredPackages: []string{"python_actr"},
}

type CCMPyACTR struct {
	framework.Framework
	framework.WriterHelper
	model     *actr.Model
	className string
	tmpPath   string
}

// New simply creates a new CCMPyACTR instance and sets the tmp path.
func New(cli *cli.Context) (c *CCMPyACTR, err error) {

	c = &CCMPyACTR{tmpPath: "tmp"}

	return
}

func (CCMPyACTR) Info() *framework.Info {
	return &Info
}

func (c *CCMPyACTR) Initialize() (err error) {
	return framework.Setup(&Info)
}

// SetModel sets our model and saves the python class name we are going to use.
func (c *CCMPyACTR) SetModel(model *actr.Model) (err error) {
	if model.Name == "" {
		err = fmt.Errorf("model is missing name")
		return
	}

	c.model = model
	c.className = fmt.Sprintf("ccm_%s", c.model.Name)

	return
}

func (c CCMPyACTR) Model() (model *actr.Model) {
	return c.model
}

// Run generates the python code from the amod file, writes it to disk, creates a "run" file
// to actually run the model, and returns the output (stdout and stderr combined).
func (c *CCMPyACTR) Run(initialBuffers framework.InitialBuffers) (generatedCode, output []byte, err error) {
	runFile, err := c.WriteModel(c.tmpPath, initialBuffers)
	if err != nil {
		return
	}

	cmd := exec.Command("python3", runFile)

	output, err = cmd.CombinedOutput()
	if err != nil {
		err = fmt.Errorf("%s", string(output))
		return
	}

	generatedCode = c.GetContents()

	return
}

// WriteModel converts the internal actr.Model to python and writes it to a file.
func (c *CCMPyACTR) WriteModel(path string, initialBuffers framework.InitialBuffers) (outputFileName string, err error) {
	patterns, err := framework.ParseInitialBuffers(c.model, initialBuffers)
	if err != nil {
		return
	}
	goal := patterns["goal"]

	outputFileName = fmt.Sprintf("%s.py", c.className)
	if path != "" {
		outputFileName = fmt.Sprintf("%s/%s", path, outputFileName)
	}

	err = framework.RemoveTempFile(outputFileName)
	if err != nil {
		return "", err
	}

	err = c.InitWriterHelper(outputFileName)
	if err != nil {
		return
	}
	defer c.CloseWriterHelper()

	c.Writeln("# Generated by gactar %s", version.BuildVersion)
	c.Writeln("#           on %s", time.Now().Format("2006-01-02 @ 15:04:05"))
	c.Writeln("#   https://github.com/asmaloney/gactar")
	c.Writeln("")
	c.Writeln("# *** NOTE: This is a generated file. Any changes may be overwritten.")
	c.Writeln("")

	if c.model.Description != "" {
		c.Write("# %s\n\n", c.model.Description)
	}

	c.outputAuthors()

	imports := []string{"ACTR", "Buffer", "Memory"}

	c.Write("from python_actr import %s\n", strings.Join(imports, ", "))

	if c.model.LogLevel == "detail" {
		c.Writeln("from python_actr import log, log_everything")
	}

	c.Write("\n\n")

	c.Writeln("class %s(ACTR):", c.className)

	for _, module := range c.model.Modules {
		c.Writeln("\t%s = Buffer()", module.GetBufferName())
	}

	memory := c.model.Memory
	additionalInit := []string{}

	if memory.Latency != nil {
		additionalInit = append(additionalInit, fmt.Sprintf("latency=%s", framework.Float64Str(*memory.Latency)))
	}

	if memory.Threshold != nil {
		additionalInit = append(additionalInit, fmt.Sprintf("threshold=%s", framework.Float64Str(*memory.Threshold)))
	}

	if memory.MaxTime != nil {
		additionalInit = append(additionalInit, fmt.Sprintf("maximum_time=%s", framework.Float64Str(*memory.MaxTime)))
	}

	if memory.FinstSize != nil {
		additionalInit = append(additionalInit, fmt.Sprintf("finst_size=%d", *memory.FinstSize))
	}

	if memory.FinstTime != nil {
		additionalInit = append(additionalInit, fmt.Sprintf("finst_time=%s", framework.Float64Str(*memory.FinstTime)))
	}

	if len(additionalInit) > 0 {
		c.Writeln("\t%s = Memory(%s, %s)", memory.GetModuleName(), memory.GetBufferName(), strings.Join(additionalInit, ", "))
	} else {
		c.Writeln("\t%s = Memory(%s)", memory.GetModuleName(), memory.GetBufferName())
	}

	c.Writeln("")

	if c.model.LogLevel == "info" {
		// this turns on some logging at the high level
		c.Writeln("\tdef __init__(self):")
		c.Writeln("\t\tsuper().__init__(log=True)")
		c.Writeln("")
	}

	if len(c.model.Initializers) > 0 {
		c.Writeln("\tdef init():")

		for _, init := range c.model.Initializers {
			initializer := init.Buffer.GetBufferName()

			// allow the user-set goal to override the initializer
			if initializer == "goal" && (goal != nil) {
				continue
			}

			c.Writeln("\t\t# amod line %d", init.AMODLineNumber)

			if initializer == "retrieval" {
				c.Write("\t\t%s.add(", "memory")
			} else {
				c.Write("\t\t%s.set(", initializer)
			}

			c.outputPattern(init.Pattern)
			c.Writeln(")")
		}

		c.Writeln("")
	}

	// Add user-set goal if any
	if goal != nil {
		c.Write("\t\tgoal.set(")
		c.outputPattern(goal)
		c.Write(")\n\n")
	}

	for _, production := range c.model.Productions {
		if production.Description != nil {
			c.Writeln("\t# %s", *production.Description)
		}

		c.Writeln("\t# amod line %d", production.AMODLineNumber)

		c.Write("\tdef %s(", production.Name)

		numMatches := len(production.Matches)
		for i, match := range production.Matches {
			c.outputMatch(match)

			if i != numMatches-1 {
				c.Write(", ")
			}
		}

		c.Writeln("):")

		if production.DoStatements != nil {
			for _, statement := range production.DoStatements {
				c.outputStatement(statement)
			}
		}

		c.Write("\n")
	}

	c.Writeln("")
	c.Writeln("if __name__ == \"__main__\":")
	c.Writeln(fmt.Sprintf("\tmodel = %s()", c.className))

	if c.model.LogLevel == "detail" {
		c.Writeln("\tlog(summary=1)")
		c.Writeln("\tlog_everything(model)")
	}

	c.Writeln("\tmodel.run()")

	return
}

func (c *CCMPyACTR) outputAuthors() {
	if len(c.model.Authors) == 0 {
		return
	}

	c.Writeln("# Authors:")

	for _, author := range c.model.Authors {
		c.Write("#\t%s\n", author)
	}

	c.Writeln("")
}

func (c *CCMPyACTR) outputPattern(pattern *actr.Pattern) {
	str := fmt.Sprintf("'%s ", pattern.Chunk.Name)

	for i, slot := range pattern.Slots {
		slotStr := slot.String()

		if slotStr == "nil" {
			str += "None"
		} else {
			str += slot.String()

		}

		if i != len(pattern.Slots)-1 {
			str += " "
		}
	}

	str += "'"

	c.Write(str)
}

func (c *CCMPyACTR) outputMatch(match *actr.Match) {
	var name string
	if match.Buffer != nil {
		name = match.Buffer.GetBufferName()
	}

	chunkName := match.Pattern.Chunk.Name
	if actr.IsInternalChunkName(chunkName) {
		if chunkName == "_status" {
			status := match.Pattern.Slots[0]
			if name == "retrieval" {
				name = "memory"
			}
			c.Write("%s='%s:True'", name, status)
		}
	} else {
		c.Write("%s=", name)
		c.outputPattern(match.Pattern)
	}
}

func (c *CCMPyACTR) outputStatement(s *actr.Statement) {
	if s.Set != nil {
		if s.Set.Slots != nil {
			slotAssignments := []string{}
			for _, slot := range *s.Set.Slots {
				value := convertSetValue(slot.Value)
				slotAssignments = append(slotAssignments, fmt.Sprintf("_%d=%s", slot.SlotIndex, value))
			}
			c.Writeln("\t\t%s.modify(%s)", s.Set.Buffer.GetBufferName(), strings.Join(slotAssignments, ", "))
		} else {
			c.Write("\t\t%s.set(", s.Set.Buffer.GetBufferName())
			c.outputPattern(s.Set.Pattern)
			c.Writeln(")")
		}
	} else if s.Recall != nil {
		c.Write("\t\t%s.request(", s.Recall.MemoryName)
		c.outputPattern(s.Recall.Pattern)
		c.Writeln(")")
	} else if s.Clear != nil {
		for _, name := range s.Clear.BufferNames {
			c.Writeln("\t\t%s.clear()", name)
		}
	} else if s.Print != nil {
		values := framework.PythonValuesToStrings(s.Print.Values, true)
		c.Writeln("\t\tprint(%s, sep='')", strings.Join(values, ", "))
	}
}

func convertSetValue(s *actr.SetValue) string {
	if s.Nil {
		return "None"
	} else if s.Var != nil {
		return *s.Var
	} else if s.Number != nil {
		return *s.Number
	} else if s.Str != nil {
		return "'" + *s.Str + "'"
	}

	return ""
}
