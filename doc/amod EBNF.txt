This was generated by converting the output of "./gactar -ebnf" using https://bottlecaps.de/convert/

That site will also generate nice railroad diagrams for the grammar.
---

AmodFile ::= '~~' 'model' '~~' ModelSection '~~' 'config' '~~' ConfigSection? '~~' 'init' '~~' InitSection? '~~' 'productions' '~~' ProductionSection?

ModelSection
         ::= 'name' ':' ( string | ident ) ( 'description' ':' string )? ( 'authors' '{' string* '}' )? ( 'examples' '{' Pattern* '}' )?

Pattern  ::= '[' ident ':' PatternSlot+ ']'

PatternSlot
         ::= '!'? ( 'nil' | ident | string | number | var )
           | wildcard

ConfigSection
         ::= ( 'gactar' '{' Field* '}' )? ( 'modules' '{' Module* '}' )? ( 'chunks' '{' ChunkDecl* '}' )?

Field    ::= ident FieldValue

FieldValue
         ::= ':' ( ident | string | number )
           | '{' Field? '}'

Module   ::= ident '{' Field* '}'

ChunkDecl
         ::= '[' ident ':' ident+ ']'

InitSection
         ::= Initialization*

Initialization
         ::= ModuleInitializer
           | SimilarityInitializer

ModuleInitializer
         ::= ident ( '{' ( NamedInitializer+ | BufferInitializer+ ) '}' | NamedInitializer )

NamedInitializer
         ::= ident? Pattern

BufferInitializer
         ::= ident ( '{' NamedInitializer+ '}' | NamedInitializer )

SimilarityInitializer
         ::= 'similar' '{' Similar+ '}'

Similar  ::= '(' ident ident number ')'

ProductionSection
         ::= Production+

Production
         ::= ident '{' ( 'description' ':' string )? Match Do '}'

Match    ::= 'match' '{' MatchItem+ '}'

MatchItem
         ::= MatchBufferPatternItem
           | MatchBufferStateItem
           | MatchModuleStateItem

MatchBufferPatternItem
         ::= ident Pattern WhenClause?

WhenClause
         ::= 'when' WhenExpression ( 'and' WhenExpression )*

WhenExpression
         ::= '(' var ComparisonOperator Arg ')'

ComparisonOperator
         ::= equality
           | inequality

Arg      ::= 'nil'
           | var
           | ident
           | string
           | number

MatchBufferStateItem
         ::= 'buffer_state' ident ident

MatchModuleStateItem
         ::= 'module_state' ident ident

Do       ::= 'do' '{' Statement+ '}'

Statement
         ::= ClearStatement
           | PrintStatement
           | RecallStatement
           | SetStatement
           | 'stop'

ClearStatement
         ::= 'clear' ( ident ','? )+

PrintStatement
         ::= 'print' ( Arg ','? )*

RecallStatement
         ::= 'recall' Pattern WithClause?

WithClause
         ::= 'with' WithExpression ( 'and' WithExpression )*

WithExpression
         ::= '(' ident Arg ')'

SetStatement
         ::= 'set' ident ( '.' ident )? 'to' ( Arg | Pattern )
