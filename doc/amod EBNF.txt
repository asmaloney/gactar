This was generated by converting the output of "./gactar -ebnf" using https://bottlecaps.de/convert/

That site will also generate nice railroad diagrams for the grammar.
---

AmodFile ::= '==model==' ModelSection '==config==' ConfigSection? '==init==' InitSection? '==productions==' ProductionSection?

ModelSection
         ::= 'name' ':' ( string | ident ) ( 'description' ':' string )? ( 'authors' '{' string* '}' )? ( 'examples' '{' Pattern* '}' )?

Pattern  ::= '[' ident ':' PatternSlot+ ']'

PatternSlot
         ::= patternspace? PatternSlotItem+ patternspace?

PatternSlotItem
         ::= '!'? ( 'nil' | ident | number | patternvar )
           | patternwildcard

ConfigSection
         ::= ( 'gactar' '{' Field* '}' )? ( 'modules' '{' Module* '}' )? ( 'chunks' '{' ChunkDecl* '}' )?

Field    ::= ident ':' FieldValue ','?

FieldValue
         ::= ident
           | string
           | number

Module   ::= ident '{' Field* '}'

ChunkDecl
         ::= '[' ident ':' ChunkSlot+ ']'

ChunkSlot
         ::= patternspace? ident patternspace?

InitSection
         ::= Initialization*

Initialization
         ::= ident ( '{' Pattern+ '}' | Pattern )

ProductionSection
         ::= Production+

Production
         ::= ident '{' ( 'description' ':' string )? Match Do '}'

Match    ::= 'match' '{' MatchItem+ '}'

MatchItem
         ::= ident Pattern

Do       ::= 'do' '{' Statement+ '}'

Statement
         ::= ClearStatement
           | PrintStatement
           | RecallStatement
           | SetStatement

ClearStatement
         ::= 'clear' ( ident ','? )+

PrintStatement
         ::= 'print' ( Arg ','? )*

Arg      ::= patternvar
           | ident
           | string
           | number

RecallStatement
         ::= 'recall' Pattern

SetStatement
         ::= 'set' ident ( '.' ident )? 'to' ( SetValue | Pattern )

SetValue ::= 'nil'
           | patternvar
           | string
           | number