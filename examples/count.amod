~~ model ~~

// The name of the model (used when generating code and for error messages)
name: count

// Description of the model (currently output as a comment in the generated code)
description: 'This is a model which adds numbers. Based on the ccm u1_count.py tutorial.'

// A list of authors. These are output as comments in the generated code.
authors {
    'Andy Maloney <asmaloney@gmail.com>'
}

// Examples of starting goals to use when running the model
examples {
    [countFrom: 2 5 starting]
    [countFrom: 1 7 starting]
}

~~ config ~~

gactar {
    // Logging level can be 'min', 'info' (default), or 'detail'
    log_level: 'detail'

    // Show detailed information about activations (if available)
    trace_activations: false
}

// Declare chunk types and their layouts
chunks {
    [count: first second]
    [countFrom: start end status]
}

~~ init ~~

// Initialize the memory
memory {
    // Initializers can have an optional chunk name like this:
    one     [count: 0 1]
    two     [count: 1 2]
    three   [count: 2 3]
    four    [count: 3 4]
    five    [count: 4 5]
    six     [count: 5 6]
    seven   [count: 6 7]
    eight   [count: 7 8]
    nine    [count: 8 9]
    ten     [count: 9 10]
}

// Default goal
goal [countFrom: 2 5 'starting']

~~ productions ~~

// Name of the production
begin {
    // Optional description
    description: 'Starting point - first production to match'
    
    // Buffers to match
    match {
        goal [countFrom: ?start ?end 'starting']
    }
    // Statements to execute
    do {
        recall [count: ?start *]
        set goal to [countFrom: ?start ?end 'counting']
    }
}

increment {
    match {
        goal [countFrom: ?x !?x 'counting']
        retrieval [count: ?x ?next]
    }
    do {
        print ?x
        recall [count: ?next *]
        set goal.start to ?next
    }
}

end {
    match {
        goal [countFrom: ?x ?x 'counting']
    }
    do {
        print ?x
        stop
    }
}