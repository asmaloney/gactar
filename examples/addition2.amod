~~ model ~~

// The name of the model (used when generating code and for error messages)
name: addition2

// Description of the model (currently output as a comment in the generated code)
description: "This model is based on the textual description in 'unit1.pdf' of the vanilla ACT-R tutorials (pp. 40-42)."

// Examples of starting goals to use when running the model
examples {
    [add_pair: 3 6 4 7 nil nil nil]
}

~~ config ~~

gactar {
    // Logging level can be 'min', 'info' (default), or 'detail'
    log_level: 'detail'

    // Show detailed information about activations (if available)
    trace_activations: true
}

// Declare chunk types and their layouts
chunks {
    [addition_fact: addend1 addend2 sum]
    [add_pair: ten1 one1 ten2 one2 ten_ans one_ans carry]
}

~~ init ~~

// Initialize the memory
memory {
    [addition_fact: 3 4 7]
    [addition_fact: 6 7 13]
    [addition_fact: 10 3 13]
    [addition_fact: 1 7 8]
}

// Default goal
goal [add_pair: 3 6 4 7 nil nil nil]

~~ productions ~~

// Name of the production
startPair {
    // Optional description
    description: 'Starting point - first production to match'
    
    // Buffers to match
    match {
        goal [add_pair: * ?one1 * ?one2 * nil *]
    }
    // Statements to execute
    do {
        set goal.one_ans to 'busy'
        recall [addition_fact: ?one1 ?one2 *]
    }
}

addOnes {
    match {
        goal [add_pair: * ?one1 * ?one2 * 'busy' *]
        retrieval [addition_fact: ?one1 ?one2 ?sum]
    }
    do {
        set goal.one_ans to ?sum
        set goal.carry to 'busy'
        recall [addition_fact: 10 * ?sum]
    }
}

processCarry {
    match {
        goal [add_pair: ?ten1 * ?ten2 * nil * 'busy']
        retrieval [addition_fact: 10 ?remainder *]
    }
    do {
        set goal.carry to 1
        set goal.one_ans to ?remainder
        set goal.ten_ans to 'busy'
        recall [addition_fact: ?ten1 ?ten2 *]
    }
}

noCarry {
    match {
        goal [add_pair: ?ten1 * ?ten2 * * * 'busy']
        retrieval module error
    }
    do {
        set goal.ten_ans to 'busy'
        set goal.carry to nil
        recall [addition_fact: ?ten1 ?ten2 *]
    }
}

addTensDone {
    match {
        goal [add_pair: * * * * 'busy' ?ones nil]
        retrieval [addition_fact: * * ?sum]
    }
    do {
        print ?sum, ?ones
        set goal.ten_ans to ?sum
    }
}

addTensCarry {
    match {
        goal [add_pair: * * * * 'busy' * 1]
        retrieval [addition_fact: * * ?sum]
    }
    do {
        set goal.carry to nil
        recall [addition_fact: 1 ?sum *]
    }
}