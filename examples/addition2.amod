==model==

// The name of the model (used when generating code and for error messages)
name: addition2

// Description of the model (currently output as a comment in the generated code)
description: "This model is based on the u1_addition2.py tutorial."

// Examples of starting goals to use when running the model
examples {
    'add 3 6 4 7 None None None'
}

==config==

// Turn on logging by setting 'log' to 'true' or 1
actr { log: true }

// Declare chunks and their layouts
chunks {
    add( slot_1 slot_2 slot_3 slot_4 slot_5 answer remainder )
    addFact( first second sum )
}

==init==

// Initialize the memory
memory {
    `addFact( 3 4 7 )`
    `addFact( 6 7 13 )`
    `addFact( 10 3 13 )`
    `addFact( 1 7 8 )`
}

==productions==

// Name of the production
startPair {
    // Buffers to match
    match {
        goal `add( ? ?one1 ? ?one2 ? None?ans ? )`
    }
    // Steps to execute
    do {
        set goal.answer to 'busy'
        recall `addFact( ?one1 ?one2 ? )`
    }
}

addOnes {
    match {
        goal `add( ? ? ? ? ? busy?ans ?carry )`
        retrieval `addFact( ? ? ?sum )`
    }
    do {
        set goal.answer to ?sum
        set goal.remainder to 'busy'
        recall `addFact( 10 ? ?sum )`
    }
}

processCarry {
    match {
        goal `add( ?ten1 ? ?ten2 ? None?tenAns ?oneAns busy?carry )`
        retrieval `addFact( 10 ?rem ?sum )`
    }
    do {
        set goal.slot_5 to 'busy'
        set goal.answer to ?rem
        set goal.remainder to 1
        recall `addFact( ?ten1 ?ten2 ? )`
    }
}

noCarry {
    match {
        goal `add( ?ten1 ? ?ten2 None?tenAns ?oneAns busy?carry )`
        memory `_status( error )`
    }
    do {
        set goal.slot_4 to 'busy'
        set goal.answer to 0
        recall `addFact( ?ten1 ?ten2 ? )`
    }
}

addTensDone {
    match {
        goal `add( ? ? ? ? busy?tenAns ?oneAns 0 )`
        retrieval `addFact( ? ? ?sum )`
    }
    do {
        print ?sum, ?oneAns
        set goal.slot_5 to ?sum
    }
}

addTensCarry {
    match {
        goal `add( ? ? ? ? busy?tenAns ? 1?carry )`
        retrieval `addFact( ? ? ?sum )`
    }
    do {
        set goal.remainder to 0
        recall `addFact( 1 ?sum ? )`
    }
}